package com.telluriumlang.ui.launcher;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.debug.core.DebugPlugin;
import org.eclipse.debug.core.ILaunchConfiguration;
import org.eclipse.debug.core.ILaunchConfigurationType;
import org.eclipse.debug.core.ILaunchConfigurationWorkingCopy;
import org.eclipse.debug.core.ILaunchManager;
import org.eclipse.debug.ui.DebugUITools;
import org.eclipse.debug.ui.ILaunchShortcut;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.internal.junit.launcher.ITestKind;
import org.eclipse.jdt.internal.junit.launcher.TestKindRegistry;
import org.eclipse.jdt.internal.junit.util.TestSearchEngine;
import org.eclipse.jdt.junit.launcher.JUnitLaunchShortcut;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.TreeSelection;
import org.eclipse.ui.IEditorInput;
import org.eclipse.ui.IEditorPart;
import org.eclipse.ui.IFileEditorInput;
import org.eclipse.ui.PlatformUI;

@SuppressWarnings("restriction")
public class RunTestShortCut extends JUnitLaunchShortcut {
	
	@Override
	public void launch(IEditorPart editor, String mode) {
		IEditorInput input = editor.getEditorInput();
		IFile file = ((IFileEditorInput) input).getFile();
		runTestCase(file, mode);
	}

	@Override
	public void launch(ISelection selection, String mode) {
		if (selection instanceof TreeSelection) {
			Object obj = ((TreeSelection) selection).getFirstElement();
			if(obj instanceof IFile) {
				runTestCase((IFile) obj, mode);
			}
		}
	}
	
	private void runTestCase(IFile file, String mode) {
		IProject project = file.getProject();
		String[] oldSegs = file.getFullPath().segments();
		StringBuffer targetClass = new StringBuffer("src-gen/");
		if(oldSegs != null && oldSegs.length > 2) {
			for(int i = 2; i < oldSegs.length; i ++ ) {
				if(oldSegs[i] == null) {
					continue;
				}
				if(i == oldSegs.length - 1) {
					String fileName = oldSegs[i].replace(".te", "").replace(".", "");
					String newFileName = fileName.substring(0, 1).toUpperCase();
					if(fileName.length() > 1) {
						newFileName += fileName.substring(1);
					}
					targetClass.append(newFileName);
				}else {
					targetClass.append(oldSegs[i]);
					targetClass.append("/");
				}
			}
			targetClass.append(".java");
			IFile generatedFile = project.getFile(targetClass.toString());
			if(generatedFile.exists()) {
				callEclipseJunitLauncher(generatedFile, mode);
			}
		}
	}
	
	/**
	 * This method will call Eclipse JUnit Launcher's methods to run the test
	 * @param generatedFile File Generated By XText
	 * @param mode Run / Debug / Profile
	 */
	private void callEclipseJunitLauncher(IFile generatedFile, String mode) {
		IJavaElement element = JavaCore.create(generatedFile);
		ITestKind testKind= TestKindRegistry.getDefault().getKind(TestKindRegistry.JUNIT4_TEST_KIND_ID);
		try {
			HashSet<IType> searchRes = new HashSet<>();
			testKind.getFinder().findTestsInContainer(element, searchRes, null);
			if(!searchRes.isEmpty()) {
				IType type = (IType) searchRes.toArray()[0];
				ILaunchConfigurationWorkingCopy icw = super.createLaunchConfiguration(type);
				DebugUITools.launch(icw, mode);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
}
