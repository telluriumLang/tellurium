import org.eclipse.emf.ecore.EObject

import com.telluriumlang.validation.AbstractTelluriumValidator
import com.telluriumlang.tellurium.IntLitera
import com.telluriumlang.tellurium.StringLitera
import com.telluriumlang.tellurium.DoubleLitera
import com.telluriumlang.tellurium.FindElement
import com.telluriumlang.tellurium.FindElements
import com.telluriumlang.tellurium.ElementReference
import com.telluriumlang.tellurium.VariableDeclaration
import com.telluriumlang.tellurium.ExtractElementFromList
import com.telluriumlang.tellurium.ElementsSelectorRef
import com.telluriumlang.tellurium.VarExpression
import com.telluriumlang.tellurium.AssertTrue
import com.telluriumlang.tellurium.AssertFalse
import com.telluriumlang.tellurium.AssertIn
import com.telluriumlang.tellurium.AssertNotIn
import com.telluriumlang.tellurium.GetInfoStatement
import com.telluriumlang.tellurium.GetInfoStatementAction
import com.telluriumlang.tellurium.GetAttributeStatement
import com.telluriumlang.tellurium.OpenPage
import com.telluriumlang.tellurium.ExtractEleFromListRef
import com.telluriumlang.tellurium.LocateElement

system com.telluriumlang.semantics.TelluriumSemantics

validatorExtends AbstractTelluriumValidator

judgments {
	type |- EObject exp : output TelluriumBasicType
		cached
		error "Cannot infer the type of " + stringRep(exp)
	subType |- TelluriumBasicType left <: TelluriumBasicType right
		error stringRep(left) + " is not compatible. It should be " + stringRep(right) + " or one of its sub-types."
}

axiom TIntLiteral
	G |- IntLitera exp : TelluriumBasicType.INT
	
axiom TStringLitera
	G |- StringLitera exp : TelluriumBasicType.STRING

axiom TDoubleLitera
	G |- DoubleLitera exp : TelluriumBasicType.DOUBLE
	
axiom TFindElement
	G |- FindElement exp : TelluriumBasicType.WEB_ELEMENT
	
axiom TFindElements
	G |- FindElements exp : TelluriumBasicType.WEB_ELEMENT_LIST

axiom TExtractElementFromList
	G |- ExtractElementFromList exp: TelluriumBasicType.WEB_ELEMENT
	
axiom TGetAttributeStatement
	G |- GetAttributeStatement exp: TelluriumBasicType.STRING

rule TVariableDeclaration
	G |- VariableDeclaration exp : TelluriumBasicType t
from {
	empty |- exp.value : t
}

rule TVarExpression
	G |- VarExpression varExp : TelluriumBasicType t
from {
	empty |- varExp.^var.value : t
}

rule TExtractEleFromListRef
	G |- ExtractEleFromListRef exp : TelluriumBasicType t
from {
	empty |- exp.extractRef : t
}

rule TLocateElement
	G |- LocateElement exp : TelluriumBasicType t
from {
	empty |- exp.element : t
}

rule TElementReference
	G |- ElementReference exp : TelluriumBasicType t
from {
	empty |- exp.ref : t
}

rule TGetInfoStatement
	G |- GetInfoStatement varExp : TelluriumBasicType t
from {
	if (varExp.action === GetInfoStatementAction.TAG_NAME 
		|| varExp.action === GetInfoStatementAction.TITLE
	) {
		t = TelluriumBasicType.STRING
	}else{
		t = TelluriumBasicType.BOOLEAN
	}
}

rule NumericSubTyping
    derives G |- TelluriumBasicType left <: TelluriumBasicType right
from {
	right === TelluriumBasicType.DOUBLE or left === right
}

checkrule checkOpenPage for 
	OpenPage stmt
from {
	empty |- stmt.target : var TelluriumBasicType referenceType
	empty |- referenceType <: TelluriumBasicType.STRING
}

checkrule checkElementReferenceStatement for 
	ElementReference stmt
from {
	empty |- stmt.ref.value : var TelluriumBasicType referenceType
	empty |- referenceType <: TelluriumBasicType.WEB_ELEMENT
}

checkrule checkElementsSelectorRefStatement for 
	ElementsSelectorRef stmt
from {
	empty |- stmt.ref.value : var TelluriumBasicType referenceType
	empty |- referenceType <: TelluriumBasicType.WEB_ELEMENT_LIST
}

checkrule checkExtractElementFromListStatement for 
	ExtractElementFromList stmt
from {
	empty |- stmt.index : var TelluriumBasicType indexType
	empty |- indexType <: TelluriumBasicType.INT
}

checkrule checkAssertTrueStatement for
	AssertTrue stmt
from {
	empty |- stmt.actual : var TelluriumBasicType actualType
	empty |- actualType <: TelluriumBasicType.BOOLEAN
}

checkrule checkAssertFalseStatement for
	AssertFalse stmt
from {
	empty |- stmt.actual : var TelluriumBasicType actualType
	empty |- actualType <: TelluriumBasicType.BOOLEAN
}

checkrule checkAssertInStatement for
	AssertIn stmt
from {
	empty |- stmt.needle : var TelluriumBasicType needleType
	empty |- needleType <: TelluriumBasicType.WEB_ELEMENT
	empty |- stmt.hayStack : var TelluriumBasicType hayStackType
	empty |- hayStackType <: TelluriumBasicType.WEB_ELEMENT_LIST
}

checkrule checkAssertNotInStatement for
	AssertNotIn stmt
from {
	empty |- stmt.needle : var TelluriumBasicType needleType
	empty |- needleType <: TelluriumBasicType.WEB_ELEMENT
	empty |- stmt.hayStack : var TelluriumBasicType hayStackType
	empty |- hayStackType <: TelluriumBasicType.WEB_ELEMENT_LIST
}

checkrule checkGetInfoStatement for
	GetInfoStatement stmt
from {
	if(stmt.target !== null){
		empty |- stmt.target : var TelluriumBasicType targetType
		empty |- targetType <: TelluriumBasicType.WEB_ELEMENT
	}
}

checkrule checkGetAttributeStatement for
	GetAttributeStatement stmt
from {
	empty |- stmt.target : var TelluriumBasicType targetType
	empty |- targetType <: TelluriumBasicType.WEB_ELEMENT
	empty |- stmt.^val : var TelluriumBasicType valType
	empty |- valType <: TelluriumBasicType.STRING
}